# -*- coding: utf-8 -*-
"""han-practice2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q2tf4wSQRVq_opjWAYzpbYpPpzcnDaje
"""

#precautionary copy

"""Proppy Propaganda Classifier - HAN
This script uses news articles pulled from a news corpus provided by https://propaganda.qcri.org/ in hopes of building a prapaganda classifier. Each article is annotated with "propoganistic" and "non-propoganistic" lables that will help with classification of each article. We exploit these labels to train a model with minimal external classification.

Let's begin:
"""

import pandas as pd
import numpy as np
from keras.preprocessing.text import Tokenizer,  text_to_word_sequence
from keras.engine.topology import Layer
from keras import initializers as initializers, regularizers, constraints
from keras.callbacks import Callback, ModelCheckpoint
from keras.utils.np_utils import to_categorical
from keras.layers import Embedding, Input, Dense, LSTM, GRU, Bidirectional, TimeDistributed, Dropout
from keras import backend as K
from keras import optimizers
from keras.models import Model
#import nested_print
#from nested_print import nprint

import matplotlib.pyplot as plt
import sys
from sklearn.metrics import roc_auc_score
from nltk import tokenize
import seaborn as sns
import re, nltk, os, sklearn

#pip3 install nested_print


def dot_product(x, kernel):
    """
    Wrapper for dot product operation, in order to be compatibl|e with both
    Theano and Tensorflow
    Args:
        x (): input
        kernel (): weights
    Returns:
    """
    if K.backend() == 'tensorflow':
        return K.squeeze(K.dot(x, K.expand_dims(kernel)), axis=-1)
    else:
        return K.dot(x, kernel)

class AttentionWithContext(Layer):
    """
    Attention operation, with a context/query vector, for temporal data.
    Supports Masking.
    Follows the work of Yang et al. [https://www.cs.cmu.edu/~diyiy/docs/naacl16.pdf]
    "Hierarchical Attention Networks for Document Classification"
    by using a context vector to assist the attention
    # Input shape
        3D tensor with shape: `(samples, steps, features)`.
    # Output shape
        2D tensor with shape: `(samples, features)`.
    How to use:
    Just put it on top of an RNN Layer (GRU/LSTM/SimpleRNN) with return_sequences=True.
    The dimensions are inferred based on the output shape of the RNN.
    Note: The layer has been tested with Keras 2.0.6
    Example:
        model.add(LSTM(64, return_sequences=True))
        model.add(AttentionWithContext())
        # next add a Dense layer (for classification/regression) or whatever...
    """

    def __init__(self,
                 W_regularizer=None, u_regularizer=None, b_regularizer=None,
                 W_constraint=None, u_constraint=None, b_constraint=None,
                 bias=True, **kwargs):

        self.supports_masking = True
        self.init = initializers.get('glorot_uniform')

        self.W_regularizer = regularizers.get(W_regularizer)
        self.u_regularizer = regularizers.get(u_regularizer)
        self.b_regularizer = regularizers.get(b_regularizer)

        self.W_constraint = constraints.get(W_constraint)
        self.u_constraint = constraints.get(u_constraint)
        self.b_constraint = constraints.get(b_constraint)

        self.bias = bias
        super(AttentionWithContext, self).__init__(**kwargs)

    def build(self, input_shape):
        assert len(input_shape) == 3

        self.W = self.add_weight(shape = (input_shape[-1], input_shape[-1],),
                                 initializer=self.init,
                                 name='{}_W'.format(self.name),
                                 regularizer=self.W_regularizer,
                                 constraint=self.W_constraint)
        if self.bias:
            self.b = self.add_weight(shape = (input_shape[-1],),
                                     initializer='zero',
                                     name='{}_b'.format(self.name),
                                     regularizer=self.b_regularizer,
                                     constraint=self.b_constraint)

        self.u = self.add_weight(shape = (input_shape[-1],),
                                 initializer=self.init,
                                 name='{}_u'.format(self.name),
                                 regularizer=self.u_regularizer,
                                 constraint=self.u_constraint)

        super(AttentionWithContext, self).build(input_shape)

    def compute_mask(self, input, input_mask=None):
        # do not pass the mask to the next layers
        return None

    def call(self, x, mask=None):
        uit = dot_product(x, self.W)

        if self.bias:
            uit += self.b

        uit = K.tanh(uit)
        ait = dot_product(uit, self.u)

        a = K.exp(ait)

        # apply mask after the exp. will be re-normalized next
        if mask is not None:
            # Cast the mask to floatX to avoid float64 upcasting in theano
            a *= K.cast(mask, K.floatx())

        # in some cases especially in the early stages of training the sum may be almost zero
        # and this results in NaN's. A workaround is to add a very small positive number Îµ to the sum.
        # a /= K.cast(K.sum(a, axis=1, keepdims=True), K.floatx())
        a /= K.cast(K.sum(a, axis=1, keepdims=True) + K.epsilon(), K.floatx())

        a = K.expand_dims(a)
        weighted_input = x * a
        return K.sum(weighted_input, axis=1)

    def compute_output_shape(self, input_shape):
        return input_shape[0], input_shape[-1]


train_df = pd.read_pickle('data_pkl/proppy_1.0.train.pkl')
val_df = pd.read_pickle('data_pkl/proppy_1.0.dev.pkl')
test_df = pd.read_pickle('data_pkl/proppy_1.0.test.pkl')


"""Now we can look at how many articles are labeled 'propaganstic', 1,  and 'non-propaganistic', -1. -The bias labels have 35 types of bias categories, unknown being one of them which is categorized as non-propaganistic. This is helpful in understanding why there are significantly larger numbers of non-propaganistic labels over propagandistic."""

grouped = train_df.groupby('propaganda_label')
print("total categories:", grouped.ngroups)
print(grouped.size())

#clean the text  to remove puntuation and unessesary spaces


def clean_str(string):
    """
    Tokenization/string cleaning for dataset
    Every dataset is lower cased except
    """
    string = re.sub(r"\\", "", string)    
    string = re.sub(r"\'", "", string)    
    string = re.sub(r"\"", "", string)    
    return string.strip().lower()

paras = []
labels = []
texts = []
sent_lens = []
sent_nums = []
for idx in range(train_df.article_text.shape[0]):
    text = clean_str(train_df.article_text[idx])
    texts.append(text)
    sentences = tokenize.sent_tokenize(text)
    sent_nums.append(len(sentences))
    for sent in sentences:
        sent_lens.append(len(text_to_word_sequence(sent)))
    paras.append(sentences)

max_features=200000
max_senten_len=50
max_senten_num=10
embed_size=100
VALIDATION_SPLIT = 0.2

tokenizer = Tokenizer(num_words=max_features, oov_token=True)
tokenizer.fit_on_texts(texts)

data = np.zeros((len(texts), max_senten_num, max_senten_len), dtype='int32')
for i, sentences in enumerate(paras):
    for j, sent in enumerate(sentences):
        if j< max_senten_num:
            wordTokens = text_to_word_sequence(sent)
            k=0
            for _, word in enumerate(wordTokens):
                try:
                    if k<max_senten_len and tokenizer.word_index[word]<max_features:
                        data[i,j,k] = tokenizer.word_index[word]
                        k=k+1
                except:
                    print(word)
                    pass

word_index = tokenizer.word_index
print('Total %s unique tokens.' % len(word_index))

data.shape

lbl = train_df['propaganda_label']
text = train_df['article_text']

cates = train_df.groupby('propaganda_label')
labels = pd.get_dummies(lbl)

indices = np.arange(data.shape[0])
np.random.shuffle(indices)
data = data[indices]
labels = labels.iloc[indices]
nb_validation_samples = int(VALIDATION_SPLIT * data.shape[0])

x_train = data
y_train = labels

val_df = val_df.rename(columns={"propaganda_label": "propaganda_label_v", "article_text" : "article_text_v"})


"""We do the same to the val and test data to make sure the format of the data is consistent throughout."""
lbl_v = val_df['propaganda_label_v']
text_v = val_df['article_text_v']

"""Now we can look at how many articles are labeled 'propaganstic', 1,  and 'non-propaganistic', -1. -The bias labels have 35 types of bias categories, unknown being one of them which is categorized as non-propaganistic. This is helpful in understanding why there are significantly larger numbers of non-propaganistic labels over propagandistic."""

groupedv = val_df.groupby('propaganda_label_v')

paras_V = []
labels_V = []
texts_V = []

vsent_lens = []
vsent_nums = []
for idx in range(val_df.article_text_v.shape[0]):
    text_v = clean_str(val_df.article_text_v[idx])
    texts_V.append(text_v)
    sentences_v = tokenize.sent_tokenize(text_v)
    vsent_nums.append(len(sentences_v))
    for sentv in sentences_v:
        vsent_lens.append(len(text_to_word_sequence(sentv)))
    paras_V.append(sentences_v)

"""Below is a micro-view of the sentence length"""

tokenizerv = Tokenizer(num_words=max_features, oov_token=True)
tokenizerv.fit_on_texts(texts_V)

vdata = np.zeros((len(texts_V), max_senten_num, max_senten_len), dtype='int32')
for i, sentences_v in enumerate(paras_V):
    for j, sent_v in enumerate(sentences_v):
        if j< max_senten_num:
            wordTokens_v = text_to_word_sequence(sent_v)
            k=0
            for _, word_v in enumerate(wordTokens_v):
                try:
                    if k<max_senten_len and tokenizerv.word_index[word_v]<max_features:
                        data[i,j,k] = tokenizerv.word_index[word_v]
                        k=k+1
                except:
                    print(word_v)
                    pass

word_indexv = tokenizerv.word_index

labels_V = pd.get_dummies(lbl_v)

indices = np.arange(vdata.shape[0])
np.random.shuffle(indices)
vdata = vdata[indices]
labels_V = labels_V.iloc[indices]



"""Now we format the test dataset"""

test_df = test_df.rename(columns={"propaganda_label": "propaganda_label_t", "article_text" : "article_text_t"})

lbl_t = test_df['propaganda_label_t']
text_t = test_df['article_text_t']

"""Now we can look at how many articles are labeled 'propaganstic', 1,  and 'non-propaganistic', -1. -The bias labels have 35 types of bias categories, unknown being one of them which is categorized as non-propaganistic. This is helpful in understanding why there are significantly larger numbers of non-propaganistic labels over propagandistic."""

groupedt = test_df.groupby('propaganda_label_t')

paras_t = []
labels_t = []
texts_t = []

sent_lens_t = []
sent_nums_t = []
for idx in range(test_df.article_text_t.shape[0]):
    textt = clean_str(test_df.article_text_t[idx])
    texts_t.append(textt)
    sentences_t = tokenize.sent_tokenize(textt)
    sent_nums_t.append(len(sentences_t))
    for sentt in sentences_t:
        sent_lens_t.append(len(text_to_word_sequence(sentt)))
    paras_t.append(sentences_t)

"""Below is a micro-view of the sentence length"""

tokenizert = Tokenizer(num_words=max_features, oov_token=True)
tokenizert.fit_on_texts(texts_t)

tdata = np.zeros((len(texts_t), max_senten_num, max_senten_len), dtype='int32')
for i, sentences_t in enumerate(paras_t):
    for j, sentt in enumerate(sentences_t):
        if j< max_senten_num:
            wordTokenst = text_to_word_sequence(sentt)
            k=0
            for _, wordt in enumerate(wordTokenst):
                try:
                    if k<max_senten_len and tokenizert.word_index[wordt]<max_features:
                        data[i,j,k] = tokenizert.word_index[wordt]
                        k=k+1
                except:
                    print(wordt)
                    pass

word_indext = tokenizert.word_index

labels_t = pd.get_dummies(lbl_t)

indices = np.arange(tdata.shape[0])
np.random.shuffle(indices)
tdata = tdata[indices]
labels_t = labels_t.iloc[indices]
tnb_validation_samples = int(VALIDATION_SPLIT * tdata.shape[0])

# x_train = data
# y_train = labels
# x_val = vdata
# y_val = labels_V
# x_test = tdata
# y_test = labels_t

# Smaller dataset for debugging
x_train = data[:100]
y_train = labels[:100]
x_val = vdata[:10]
y_val = labels_V[:10]
x_test = tdata[:10]
y_test = labels_t[:10]

"""Now we can potentially work with the model!!"""

GLOVE_DIR = open("glove.6B.100d.txt", encoding="utf8")

embeddings_index = {}
f = glove.read(GLOVE_DIR)
    

for line in f:
    try:
        values = line.split()
        word = values[0]
        coefs = np.asarray(values[1:], dtype='float32')
        embeddings_index[word] = coefs
    except:
        print(word)
        pass
f.close()

embedding_matrix = np.zeros((len(word_index) + 1, embed_size))
absent_words = 0
for word, i in word_index.items():
    embedding_vector = embeddings_index.get(word)
    if embedding_vector is not None:
        # words not found in embedding index will be all-zeros.
        embedding_matrix[i] = embedding_vector
    else:
        absent_words += 1

embedding_layer = Embedding(len(word_index) + 1,embed_size,weights=[embedding_matrix], input_length=max_senten_len, trainable=False)

REG_PARAM = 1e-13
l2_reg = regularizers.l2(REG_PARAM)

word_input = Input(shape=(max_senten_len,), dtype='float32')
word_sequences = embedding_layer(word_input)
word_lstm = Bidirectional(LSTM(150, return_sequences=True, kernel_regularizer=l2_reg))(word_sequences)
word_dense = TimeDistributed(Dense(200, kernel_regularizer=l2_reg))(word_lstm)
word_att = AttentionWithContext()(word_dense)
wordEncoder = Model(word_input, word_att)

sent_input = Input(shape=(max_senten_num, max_senten_len), dtype='float32')
sent_encoder = TimeDistributed(wordEncoder)(sent_input)
sent_lstm = Bidirectional(LSTM(150, return_sequences=True, kernel_regularizer=l2_reg))(sent_encoder)
sent_dense = TimeDistributed(Dense(200, kernel_regularizer=l2_reg))(sent_lstm)
sent_att = Dropout(0.5)(AttentionWithContext()(sent_dense))
preds = Dense(2, activation='sigmoid')(sent_att)
model = Model(sent_input, preds)
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['acc'])

################################################The model!!#####################
history = model.fit(x_train, y_train,  
                    batch_size=200, 
                    epochs=10, 
                    verbose = 1, 
                    validation_data=(x_val, y_val))
train = model.evaluate(x_train, y_train, verbose=0)
score = model.evaluate(x_val, y_val, verbose=0)

prediction = model.predict(x_test)

# Convert predictions
predictions_labels = prediction.copy()
pred_labels_1D = []
labels_1D = []
for i in range(len(prediction)):
    for j in range(2):
        if prediction[i][j] > 0.5:
            predictions_labels[i][j] = 1
        else:
            predictions_labels[i][j] = 0
    if prediction[i][0] > 0.5:
        pred_labels_1D.append(-1)
    else:
        pred_labels_1D.append(1)
    if y_test.iloc[i, 0] == 1:
        labels_1D.append(-1)
    else:
        labels_1D.append(1)

pred_eval = [int(labels_1D[i] == pred_labels_1D[i]) for i in range(len(labels_1D))]
print("classification accuracy:", sum(pred_eval) / len(pred_eval))

conf_matrix = sklearn.metrics.confusion_matrix(labels_1D, pred_labels_1D)
print(conf_matrix)
